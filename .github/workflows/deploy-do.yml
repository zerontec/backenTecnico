name: Deploy to DigitalOcean Droplet (Productions)

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Create .env file
        run: |
          # Configuración por defecto 
          DATABASE_URL="${{ secrets.DATABASE_URL}}"
          PORT=5000 # Desarrollo usa puerto 5000
          FRONT_URL="${{ secrets.FRONT_URL}}"
          EMAIL_FROM="${{ secrets.EMAIL_FROM}}"
          EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD}}"
          JWT_SECRET="${{ secrets.JWT_SECRET}}"
          IS_PRODUCTION="${{ secrets.IS_PRODUCTION}}"
          ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS}}"
          REFRESH_SECRET="${{ secrets.REFRESH_SECRET}}"
          COOKIE_DOMAIN="${{ secrets.COOKIE_DOMAIN}}"
          NODE_ENV="${{ secrets.NODE_ENV}}"
          POSTMARK_API_TOKEN="${{secrets.POSTMARK_API_TOKEN}}"
          APP_NAME=${{secrets.APP_NAME}}"
          SUPPORT_EMAIL=${{secrets.SUPPORT_EMAIL}}"
          
          
          

          # Si IS_PRODUCTION es true (o algún otro valor que definas para producción),
          # sobreescribe DATABASE_URL con la conexión local de PostgreSQL
          if [ "${{ secrets.IS_PRODUCTION }}" == "true" ]; then
            DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.DB_NAME}}"
            echo "Using local PostgreSQL connection for production."
          fi

          echo "DATABASE_URL=$DATABASE_URL" > .env
          echo "PORT=$PORT" >> .env
          echo "FRONT_URL=$FRONT_URL" >> .env
          echo "EMAIL_FROM=$EMAIL_FROM" >> .env
          echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "REFRESH_SECRET=$REFRESH_SECRET" >> .env
          echo "IS_PRODUCTION=$IS_PRODUCTION" >> .env
          echo "ALLOWED_ORIGINS=$ALLOWED_ORIGINS" >> .env
          echo "COOKIE_DOMAI=$COOKIE_DOMAI" >> .env
          echo "NODE_ENV=$NODE_ENV" >> .env
          echo "POSTMARK_API_TOKEN" >> .env
          echo "APP_NAME" >> .env
          echo "SUPPORT_EMAIL" >> .env

      - name: Build Docker image
        working-directory: ./
        run: docker build -t ${{ secrets.DOCKERHUB_REPOSITORY }}:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_REPOSITORY }}:latest

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            # Crear directorios esenciales
            mkdir -p /app/nginx /app/ssl
            
            # Crear archivo de configuración de Nginx
            cat << 'EOF' > /app/nginx/nginx.conf
            server {
                listen 80;
                server_name nbagro.xyz www.nbagro.xyz;
                return 301 https://$host$request_uri;
            }

            server {
                listen 443 ssl http2;
                server_name nbagro.xyz www.nbagro.xyz;

                ssl_certificate /etc/nginx/ssl/fullchain.pem;
                ssl_certificate_key /etc/nginx/ssl/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
                ssl_prefer_server_ciphers on;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;

                location / {
                    proxy_pass http://agro_container:5000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # Detener y eliminar contenedores antiguos
            docker stop nginx-container agro_container || true
            docker rm nginx-container agro_container || true
            
            # Obtener la última imagen del backend
            docker pull ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            
            # Iniciar contenedor de la aplicación
            docker run -d --name agro_container --env-file .env ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            
            # Iniciar contenedor de Nginx
            docker run -d \
              --name nginx-container \
              -p 80:80 \
              -p 443:443 \
              -v /app/nginx/nginx.conf:/etc/nginx/conf.d/default.conf \
              -v /app/ssl:/etc/nginx/ssl \
              --link agro_container:agro_container \
              nginx:alpine
            
            # Instalar Certbot y generar certificados (solo primera vez)
            if [ ! -f "/app/ssl/fullchain.pem" ]; then
              docker stop nginx-container || true
              apt-get update
              apt-get install -y certbot
              certbot certonly --standalone -d nbagro.xyz --non-interactive --agree-tos -m ${{ secrets.ADMIN_EMAIL }}
              cp /etc/letsencrypt/live/nbagro.xyz/fullchain.pem /app/ssl/
              cp /etc/letsencrypt/live/nbagro.xyz/privkey.pem /app/ssl/
              docker start nginx-container
            fi
            
            # Configurar renovación automática de certificados
            (crontab -l ; echo "0 3 * * * certbot renew --quiet && cp /etc/letsencrypt/live/nbagro.xyz/fullchain.pem /app/ssl/ && cp /etc/letsencrypt/live/nbagro.xyz/privkey.pem /app/ssl/ && docker restart nginx-container") | crontab -
            
            docker image prune -af
